@use "../abstracts/" as *;
@use './box' as *;
// %하면 공통으로 묶임 
//%(extend는)use밑에 쓰기 
//class가 아닌 코드 내에서 extend를 생성. 
%product {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }
%productThumb {
    overflow: hidden;
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }
.product-vertical {
    display: flex;
    gap: rem(6);
    a {
        @extend %productThumb;
        display: block;
        width: rem(104);
        height: rem(175);
        border-radius: rem(9);
        // radius는 a에 붙이면 됨
        //img가 꽉차야해서 wid,hei는 무조건 100%. object cover. 
        //100%주려면 부모에 크기가 있어야한다. 
        img {
            transform: scale(1.2);
            //사진 가장자리에 여백이 있어서 사진을 여백없이 꽉채우려고 키움.
            //width, hei를 150%으로 키우는게 아니라 scale로 키움.
            //이런 노하우 바로알게돼서 좋음. 쉬운 길을 바로 알려줌.
            transform-origin: center;
            // 사진이 확대되는 위치 기준이 center
            //이미지에 특정 클래스를, li에 특정 클래스를 넣으면 사진 프레임 모양이 다르게 하기
        }
    }
}


// .product-list {
//     display: grid;
//     grid-template-columns: repeat(3, 1fr);
//     &__thumb {
//         img {
//             width: 100%;
//             height :100%;
//             aspect-ratio: 1/1;
//             // 직사각형이 오더라도 정사각형이 되게 (img가 아닌 부모니까 부모가 정사각형되는것임)
//             object-fit: cover;
//             //이미지가 찌그러지지 않고 비율유지
//         }
//     }
//     &__price {
//         padding-top: rem(1);
//     }
// }
// .only-prodect {
//     gap: rem(6) rem(4);
//     // 순서 행 / 열 
// }
.product-list {
    @extend %product;
    gap: rem(6);
    &__thumb {
    @extend %productThumb;
      margin-bottom: rem(6);
      img {
        aspect-ratio: 1/1;
      }
    }
    &__price {
      padding-top: rem(1);
    }
  }
  .only-product {
    @extend %product;
    gap: rem(6) rem(4);
  }
  
  .product-like {
    li {
        @extend .box-white;
        }
        a {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
        }
        &__thumb {
            @extend %productThumb;
            grid-column: 1 / 3;
            border-radius: rem(5);
            margin-bottom: rem(7);
            img {
                aspect-ratio: 1/1.2;
                //살짝 직사각형으로 감
            }
    
        }
        &__count {
            display: flex;
            align-items: center;
            gap: rem(1.2);
            color: $black;
            font-size: rem(15);
            font-weight: 700;
            line-height: rem(19);
            letter-spacing: rem(-0.15);
            &::after {
                @include background("ico_like.svg", null, null, contain);
                content: "";
                width: rem(10);
                height: rem(10);
                // 좌표, 색상. rem증가하면 이미지도 증가해야하는데 가로세로 크기에따라 증가함. 걔 따라오려면 contain해서 무조건 꽉차게 만들어야함. cover는 짤리니까
                //after는 inline요소임
            }
        }
        &__state {
            justify-self: end;
        }
  }
// product-list only-prodect 에서 product-list 중복으로 위에 div에도 들어가니
// 각각 product-list 랑 only-prodect 만 쓸 수 있도록하기
//only-prodect 에는  product-list요소도 들어가서  product-list를 못지우니까


// 쌤 코딩 방식이 좀 바뀜. 전에는 유틸리티코드 방식으로 했는데
// 유틸리티 코드 (부트스트랩, 테일윈드). mt-10.. 
// 이젠 %로 공통으로 묶어서 함. 클래스명이 깔끔해지는 장점 있음.
// 유틸리티 코드로 할건지 %로 할건지 하려면 쭉 하나로 해야함

